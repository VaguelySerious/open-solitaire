/*
----------------------
Open Solitaire Project
----------------------
*/

//////////////////////
// GLOBAL VARIABLES //
//////////////////////

var colors = ["diamonds", "hearts", "spades", "clubs"];

////////////////////////
// OBJECT DEFINITIONS //
////////////////////////

// A playing card //
function Card (color, value, faceDown) {
	this.color = color;
	this.value = value;
	this.faceDown = faceDown || false;

	// Contructs the self-corresponding DOM element
	this.build = function(){
		var cardBuild = [];
		var classNames = [
			"card card--" + this.color + " card--" + this.value,
			"card__front", "card__color", "card__color", "card__back"
		];

		for (var i = 0; i < classNames.length; i++){
			cardBuild.push(document.createElement("div"));
			cardBuild[i].className += classNames[i];
			if (i != 0) {
				cardBuild[i==2||i==3?1:0].appendChild(cardBuild[i]);
			}
		}
		return cardBuild[0];
	};
}

// A collection of playing cards //
function Board (size, cardCount) {
	this.stacks = [];
	for (var i = 0; i < size; i++) {
		stacks.push([]);
	}

	// Empties the board
	this.emptyStacks = function (){
		for (var i = 0; i < stacks.length; i++) {
			stacks[i] = [];
		}
	};

	// Adds a card from a stack
	this.add = function (card, stack, toFront, flip) {
		if (card==null) return null;
		toFront = toFront || false;
		if (toFront) {
			document.getElementById("stack" + stack).append(card.build());
			return stacks[stack].push(card);
		}
		else {
			return stacks[stack].unshift(card);
		}
	};

	// Removes a card from a stack
	this.remove = function (stack, fromFront, flip) {
		fromFront = fromFront || false;
		if (fromFront) return stacks[stack].pop(card);
		else return stacks[stack].shift(card);
		// TODO DOM
	};

	// Creates card in random order and returns them
	this.createCards = function () {
		tempArr = [];
		for (var i = 0; i < cardCount; i++) {
			tempArr.push(new Card("hearts", 4));	//TODO
		}
	};

	// Finds the position of the card in the stacks
	this.findCardPosition = function(cardNode){
		//TODO
	};

	// Return a clone of the stacks array
	this.copyStack = function () {
		n = [];
	  for (var k = 0; k < stacks.length; k++) {
	    n.push([]);
	  }
	  for (var i = 0; i < stacks.length; i++) {
	    for (var j = 0; j < stacks[i].length; j++) {
	      n[i].push(stacks[i][j]);
	    }
	  }
	  return n;
	};
}

// Keeps track of the entire game
function Game () {

}