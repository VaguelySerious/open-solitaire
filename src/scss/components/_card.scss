///
///
/// Card component
///
/// ------------------------------------------------------------------
///
/// 1. Interaction
///
/// 2. Card colors and values
///    2.1  Large card value in the middle
///    2.2  Number handlingg
///
/// 3. Corner card values
///
/// 4. Card Back
///
///


.card {
  border-radius: $card-border-radius;
  @include elevate(1);
  color: $card-color;
  cursor: pointer;
  flex-shrink: 0;
  font: bold #{$card-font-size}/1 $font-text;
  font-size: calc((100vw - #{$board-column-gutter * 2} * var(--columns)) / var(--columns) / 4);
  overflow: hidden;
  position: relative;
  transition: box-shadow $transition, transform $transition;
  transform: translate3d(0,0,0);
  transform-origin: center;
  transform-style: preserve-3d;
  width: $card-width;


  @include break(mobile) {
    font-size: calc((100vw - #{$board-column-gutter * 2} * var(--columns)) / var(--columns) / 5);
  }

  @include break(tablet) {
    font-size: calc((100vw - #{$board-column-gutter * 2} * var(--columns)) / var(--columns) / 7);
  }

  @include break(desktop) {
    font-size: calc((100vw - #{$board-column-gutter * 2} * var(--columns)) / var(--columns) / 8);
  }


  // Force card aspect ratio
  &::after {
    content: '';
    display: block;
    height: 0;
    padding-bottom: (100% * $card-ratio);
    width: 100%;


    @media only screen and (max-width: 768px) and (orientation: landscape) {
      padding-bottom: (100% * $card-ratio-s);
    }
  }



  //
  // 1. Card interaction
  //
  &:hover {
    @include elevate(25);
  }

  &:hover {
    transform: translate3d(0, -3px, 0);
  }


  &.clicked {
    @include elevate(
      $level:   3,
      $color:   adjust-color($color-primary, $lightness: 30%, $saturation: 100%),
      $opacity: 0.5
    );

    &:hover {
      @include elevate(
        $level:   10,
        $color:   adjust-color($color-primary, $lightness: 30%, $saturation: 100%),
        $opacity: 0.5
      );
    }
  }


  &.facedown {
    transform: translate3d(0,0,0) rotateY(180deg);


    &:not(:last-child) {
      cursor: default;
      pointer-events: none;
    }

    &:hover {
      @include elevate(25);
      transform: translate3d(0, -3px, 0) rotateY(180deg);
    }
  }


  &.fixed {
    font-size: $card-font-size;
    max-width: $card-fixed-width;
    min-width: $card-fixed-width-min;
    pointer-events: all;
    width: $card-fixed-width-max;

    &:hover {
      @include elevate(25);
      transform: rotateY(180deg);
    }

    &:hover ~ & {
      @include elevate(1);
      transform: rotateY(180deg);
    }

    &::after {
      padding-bottom: 100% * $card-ratio !important;
    }
  }




  //
  // 2. Card colors and values
  //
  &.hearts, &.diamonds { color: $color-red; }

  @each $key, $color in $card-colors {
    &.#{$key} { --card-color: '#{$color}'; }
  }

  @each $key, $value in $card-values {
    &.card-#{$key} { --card-value: '#{$value}'; }
  }



  //
  // 2.1 Large card value
  //
  &__front {
    background: $color-base;
    height: 100%;
    pointer-events: none;
    position: absolute;
    transition: transform $transition;
    width: 100%;

    .facedown & {
      transform: rotateY(180deg);
    }

    &::before {
      content: 'A';
      display: flex;
      font-size: 150%;
      justify-content: center;
      left: 50%;
      letter-spacing: 0.2em;
      line-height: 4;
      margin-left: 0.1em;                // readjust the letter-spacing
      position: absolute;
      text-align: center;
      top: 50%;
      transform: translate(-50%, -50%);
      white-space: pre;
      width: 2em;
      width: 2ch;
      word-wrap: break-word;



      //
      // 2.2 Number Handling
      // pretty-print the card value
      //
      @each $key, $value in $card-values {
        $number: number($key);

        .card-#{$key} & {
          $output: '';

          // numerical values
          @if $number AND $number < 10 {
            @for $i from 0 through $number {


              @if ($number < 3) OR
                  ($number %2 != 0 AND $number < 7 AND ($i %2 != 0)) OR
                  (($number == 4 OR $number == 6 OR $number == 9)
                      AND ($i == 1 OR $i == 2 OR $i == 4 OR $i == 6 OR $i == 7)) OR
                  ($number == 7 AND ($i == 1 OR $i == 2 OR $i == 4 OR $i == 5)) OR
                  ($number == 8 AND ($i == 1 OR $i == 3 OR $i == 4 OR $i == 6 OR $i == 8)) {
                $output: $output var(--card-color) '\a';
              }

              @else {
                $output: $output var(--card-color);
              }
            }

            content: $output;
          }

          // non-numerical values and ace
          @if $number AND $number >= 10 OR $number == 0 {
            font: bold 300%/1 $font-text;

            @if $number != 0 {
              content: $value;
            }
          }

          // 3-line cards
          @if $number == 2 OR $number == 4 OR $number == 5 {
            line-height: 2;
          }

          // multiple lines
          @elseif $number >= 6 {
            line-height: 1;
          }
        }
      }
    }
  }



  //
  // 3. Corner card values
  //
  &__values {
    display: flex;
    height: 100%;
    justify-content: space-between;
    left: 0;
    padding: $card-padding;
    position: absolute;
    top: 0;
    width: 100%;

    &::after,
    &::before {
      content: var(--card-value)'\a'var(--card-color);
      text-align: center;
      text-transform: uppercase;
      white-space: pre;
    }

    &::before {
      align-self: flex-start;
    }

    &::after {
      align-self: flex-end;
      transform: rotate(180deg);
    }
  }



  //
  // 4. Card back
  //
  &__back {
    background: $color-primary;
    border: $card-back-border solid $color-base;
    height: 100%;
    -webkit-backface-visibility: hidden;
    left: 0;
    overflow: hidden;
    pointer-events: none;
    position: absolute;
    top: 0;
    transform: translateZ(0) rotateY(180deg);
    transition: transform $transition;
    width: 100%;


    .facedown & {
      transform: translateZ(0) rotateY(0deg);
    }

    &::after,
    &::before {
      content: '';
      position: absolute;
      height: 150%;
      opacity: 0.25;
      background: darken($color-primary, 15%);
      mix-blend-mode: multiply;
      top: 0;
      width: 100%;
    }

    &::after {
      left: 37.5%;
      transform: rotate(#{$card-diagonal-angle}deg);
    }

    &::before {
      right: 37.5%;
      transform: rotate(#{$card-diagonal-angle * -1}deg);
    }
  }
}
