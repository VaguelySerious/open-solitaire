///
/// Solitaire - functions collection
///

//
// calculate column width based on given column span
//
@function columns($n, $max: $grid-columns) {
  @return (100vw / $max * $n);
}


//
// rem-function
//
@function rem($size) {
  @return #{$size / $document-font-size}rem;
}


//
// golden ratio calculator
//
@function golden-ratio($size, $reverse: false) {
  @if $reverse == true {
    @return ($size * 1.618);
  }

  @else {
    @return ($size / 1.618);
  }
}


//
// map helpers
//
@function map-first($map) {
  @return nth($map, 1);
}

@function map-last($map) {
  @return nth($map, length($map));
}

@function map-nth($map, $n) {
  @return nth($map, $n);
}

//
// fetch the given color from the color palette
//
@function get-color($palette, $tone: "base", $map: $colors) {
  @return map-get(map-get($map, $palette), $tone);
}

@function color($palette, $map: $colors) {
  @return map-get($map, $palette);
}


//
// calculates power to a number
//
@function power($n, $exp) {
  $value: 1;

  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $n;
    }
  }
  @elseif $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $n;
    }
  }

  @return $value;
}


//
// calculate luminance of a color
//
@function colorLuminance($color) {
  $color-rgb: ('red': red($color), 'green': green($color), 'blue': blue($color));

  @each $name, $value in $color-rgb {
    $adjusted: 0;
    $value: $value / 255;

    @if $value < 0.03928 {
      $value: $value / 12.92;
    }
    @else {
      $value: ($value + 0.055) / 1.055;
      $value: power($value, 2);
    }

    $color-rgb: map-merge($color-rgb, ($name: $value));
  }

  @return (map-get($color-rgb, 'red') * .2126) + (map-get($color-rgb, 'green') * .7152) + (map-get($color-rgb, 'blue') * .0722);
}


//
// create the visually readable invert of a color
//
@function colorInvert($color) {
  @if colorLuminance($color) > 0.33 {
    @return desaturate(darken($color, 30%), 5%);
  }
  @else {
    @return #fff;
  }
}

//
// helper function to calculate space reserved for cards
//
@function cards-space($n, $board-size) {
  @return ($board-size * $cards-space);
}



//
// gets the amount of cards displayed in the tableau
// and returns the viewport-relative card width
//
@function card-size($n, $board-size) {
  @return (cards-space($n, $board-size) / $n);
}


//
// calculate margin-left for cards based on their size
// since the margin has already been subtracted from the original card width,
// the multiplicator deviates from the original calculation
//
@function card-margin($n, $board-size) {
  @return (($board-size - cards-space($n, $board-size)) / ($n - 1));
}


//
// calculate padding of the board based on given board size
//
@function board-padding($board-size) {
  @return ((100vw - $board-size) / 2);
}