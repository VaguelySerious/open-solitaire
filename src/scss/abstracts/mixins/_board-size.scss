//
// mixin to handle responsive styling for the entire board
//
// calculate the board padding and width of cards and card placeholders
// receives the number of cards as a parameter
//

@mixin board-size($n) {



  // default styles (mobile-first)
  @include helper($n, $board-default-size);

  // iterate through breakpoint-relative board widths
  @each $key, $value in $board-sizes {
    @include break($key) {
      @include helper($n, $value);
    }
  }
}
// board size helper mixin
@mixin helper($n, $board-size) {
  $card-width: card-size($n, $board-size);
  $card-height: $card-width * $card-ratio;

  padding-left: board-padding($board-size);
  padding-right: board-padding($board-size);


  // card dimensions
  .card {
    @include card-dimensions($n, $board-size);

    // cards should be stacked so that the card value
    // and color are still visible
    margin-bottom: ($card-height * -0.725);


    // if the card is face down, save space
    &--back {
      margin-bottom: ($card-height * -0.825);
    }


    &__back,
    &__front {
      @include card-border-radius;
    }

    &__back {
      border-width: ($card-width * 0.05);
    }

    &__front {
      &::before {
        font-size: ($card-width * 0.5);
      }
    }


    &__color {
      font-size: ($card-width * 0.15);
    }
  }


  // empty piles or placeholders
  .card-placeholder {
    @include card-dimensions($n, $board-size);
    margin-left: card-margin($n, $board-size);

    &.tableau__column:before {
      @include card-dimensions($n, $board-size);
      margin-left: 0;
    }
  }

  .foundations__foundation::after,
  .deck__button::before {
    font-size: ($card-width * 0.5);
  }
}