///
///
/// Game Component Styles
///
/// ------------------------------------------------------------------
///
/// This holds the flow and restrictions for cards inside a game or
/// distribution.
///
/// The board receives a number of columns it should display the cards
/// in. That number determines the card size and the spacing,
/// depending on the viewport size;
///
/// ------------------------------------------------------------------
///
/// 1. Variables
///
/// 2. Controls
///
/// 3. Board
///    3.1 Board components
///
/// 4. Card stacks
///    Moved to global styles, `components/_stacks.scss` since the
///    styling also needs to affect the cards the stacks are holding.
///
///    4.1   Default: cards stacked on top of each other
///    4.2   Vertically stacked cards
///    4.3   Horizontally stacked cards
///
/// 5. Scoreboard
///
///

//
// 1. Variables
//
$controls-switch-bp:      'tablet-l';

.gamewrap {
  -webkit-user-select: none;
  user-select: none;
}


//
// 2. Controls
//
.controls {
  align-items: center;
  bottom: 0;
  display: flex;
  left: 0;
  right: 0;
  position: fixed;
  transition: all $transition;
  z-index: $layer-controls;


  @include break($controls-switch-bp) {
    flex-direction: column;
    padding: $spacing-small 0;
    right: auto;
    top: 0;
  }

  @include break(desktop) {
    width: $controls-width;
  }


  .settings {
    margin-left: auto;


    @include break(tablet-l) {
      margin-left: 0;
    }
  }


  .icon-button {
    animation: slideInFromLeft $transition;
    transition: all $transition;


    &.disabled,
    &[disabled] {
      color: lighten($color-board, 15%);
      pointer-events: none;
    }


    &.help-toggle {
      margin-top: auto;
    }
  }


  .color-picker {
    margin-top: auto;
    position: relative;


    &__current,
    &__option {
      border-radius: 50%;
      display: block;
      height: 100%;
      position: relative;
      width: 100%;
    }


    &__current {
      background: var(--card-back);
    }


    &__tooltip {
      background: darken($color-board, 5%);
      border-radius: 5px;
      color: $color-base;
      cursor: default;
      display: block;
      font-size: $fs-small;
      font-weight: bold;
      line-height: 1;
      left: 100%;
      opacity: 0;
      padding: 0.4em;
      position: absolute;
      text-transform: lowercase;
      top: 50%;
      transform: translate(-10px, -50%);
      transition: all $transition;
      visibility: hidden;
      white-space: nowrap;


      &::before {
        border: 5px solid transparent;
        border-left: 0;
        border-right-color: darken($color-board, 5%);
        content: '';
        position: absolute;
        top: 50%;
        margin-top: -5px;
        right: 100%;
      }
    }

    &:hover .color-picker__tooltip {
      opacity: 1;
      transform: translate(0, -50%);
      visibility: visible;
    }


    & + .help-toggle {
      margin-top: 0;
    }
  }
}



//
// 3. Board
//
.board {
  display: flex;
  flex-flow: column nowrap;
  height: 100%;
  padding: $board-column-gutter-s;
  perspective: 1200px;
  -webkit-user-select: none;
  user-select: none;
  transition: all $transition;

  --width: 92%;
  --columns: 7;


  @include break(mobile, max) {
    &#board {
      --spacing: 0vw;
    }
  }


  @include break(mobile) {
    padding: $spacing-small 0;
    margin: 0 $spacing-small;

    @include break(desktop, max) {
      --spacing: 0.25vw;
    }
  }


  @include break($controls-switch-bp) {
    padding: $spacing-base 0;
    margin: 0 $controls-width;
  }


  @include break(desktop) {
    --spacing: 0.5vw;
    margin: 0 auto;
    max-width: var(--width);
  }
}


// 4. Board components
.row {
  align-items: flex-start;
  align-content: flex-start;
  display: flex;
  flex-flow: row nowrap;
  flex: 0 0 auto;
  transform: translateZ(0px);
  width: 100%;


  &.flex,
  &:empty {
    flex: 1;
  }


  &:not(.flex),
  &:not(:empty) {
    // height: 30%;
    // height: calc((100vw / var(--spacing) * var(--columns)) * var(--columns) * 1.4);
  }


  .stacked & {
    margin-bottom: calc(100vw / var(--columns) * 0.3 * -1);
  }
}


.stack {
  margin: var(--spacing);
}


.spacer {
  &.flex {
    flex: 1;
    width: auto;
  }

  &.shrink {
    flex-shrink: 1;
    width: auto;
  }
}


.flex {
  @include break(mobile, max) {
    &:empty {
      display: none;
    }
  }
}


//
// 5. Scoreboard
//

.scores {
  display: block;
  margin: $spacing-large 0 $spacing-x-large;
}
